from config import tp_presets, client_map

# ==== –í—ã–±–æ—Ä –±–∏—Ä–∂–∏ ====
print("–í—ã–±–µ—Ä–∏ –±–∏—Ä–∂—É:")
for i, name in enumerate(client_map.keys(), start=1):
    print(f"{i}. {name.capitalize()}")

choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏—Ä–∂–∏: "))
exchange_names = list(client_map.keys())

if 1 <= choice <= len(exchange_names):
    selected_exchange = exchange_names[choice - 1]
    ClientClass = client_map[selected_exchange]
    client = ClientClass()  # —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –±–∏—Ä–∂–∏
    print(f"‚úÖ –ë–∏—Ä–∂–∞ –≤—ã–±—Ä–∞–Ω–∞: {selected_exchange}")
else:
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –±–∏—Ä–∂–∏!")

# ==== –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ====
symbol = input("Symbol (e.g. BTCUSDT): ").strip().upper()
side = input("Side (Long/Short): ").capitalize()
leverage = int(input("Leverage (e.g. 10): "))
margin_usd = float(input("Margin USD (e.g. 100): "))

# ==== –í—ã–±–æ—Ä TP –ø—Ä–µ—Å–µ—Ç–∞ ====
print("\nChoose TP preset:\n")
for i, preset in enumerate(tp_presets):
    print(f"{i+1}. {preset['name']}")

preset_choice = int(input("\nYour choice: ")) - 1
preset = tp_presets[preset_choice]

tp_relative = preset["take_percents"]
platform_levels = preset["platform_levels"]

def convert_relative_to_absolute(relatives):
    """Convert relative TP percentages (by remainder) to absolute weights."""
    absolutes = []
    remaining = 1.0
    for r in relatives:
        part = round(remaining * r, 6)
        absolutes.append(part)
        remaining -= part
    return absolutes

tp_percents = convert_relative_to_absolute(tp_relative) if sum(tp_relative) > 1.01 else tp_relative

# ==== –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∏ TP —Ü–µ–Ω ====
price = client.get_price(symbol)
print(f"\nüìà Current price of {symbol}: {price:.2f}")

tp_prices = []
print("\n–í–≤–µ–¥–∏ —Ü–µ–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞:")
for i, percent in enumerate(tp_percents):
    tp_price = float(input(f"  TP {i+1} (–¥–æ–ª—è {percent*100:.1f}%): "))
    tp_prices.append(tp_price)

# ==== Stop Loss ====
sl_price = float(input("SL price: "))

# ==== –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ ====
print(f"\nüõí Placing order with:")
print(f" - TP percents: {tp_percents}")
print(f" - TP prices:   {tp_prices}")
print(f" - SL price:    {sl_price}\n")

result = client.place_order(
    symbol=symbol,
    side=side,
    leverage=leverage,
    margin_usd=margin_usd,
    tp_prices=tp_prices,
    tp_percents=tp_percents,
    sl_price=sl_price
)

print(f"\n‚úÖ Order placed successfully! TP orders: {result['tp_orders']}")
from clients.bybit import BybitClient
from clients.binance import BinanceClient
# from clients.bingx import BingxClient  # ‚Üê –¥–æ–±–∞–≤–∏—à—å, –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤ –±—É–¥–µ—Ç

from utils.helpers import round_to_step  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≥–¥–µ-—Ç–æ
from config import tp_presets  # TP —à–∞–±–ª–æ–Ω—ã

# ===== –ö–ª–∏–µ–Ω—Ç-–º–∞–ø =====
client_map = {
    "bybit": BybitClient,
    "binance": BinanceClient,
    # "bingx": BingxClient,
}

# ===== –í—ã–±–æ—Ä –±–∏—Ä–∂–∏ =====
print("–í—ã–±–µ—Ä–∏ –±–∏—Ä–∂—É:")
for i, name in enumerate(client_map.keys(), start=1):
    print(f"{i}. {name.capitalize()}")

try:
    choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏—Ä–∂–∏: "))
    exchange_names = list(client_map.keys())
    selected_exchange = exchange_names[choice - 1]
    ClientClass = client_map[selected_exchange]
    client = ClientClass()
    print(f"\n‚úÖ –ë–∏—Ä–∂–∞ –≤—ã–±—Ä–∞–Ω–∞: {selected_exchange}")
except (ValueError, IndexError):
    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –±–∏—Ä–∂–∏.")
    exit(1)

# ===== –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ =====
symbol = input("Symbol (e.g. BTCUSDT): ").strip().upper()
side = input("Side (Long/Short): ").capitalize()
leverage = int(input("Leverage (e.g. 10): "))
margin_usd = float(input("Margin USD (e.g. 100): "))

# ===== –í—ã–±–æ—Ä TP –ø—Ä–µ—Å–µ—Ç–∞ =====
print("\n–í—ã–±–µ—Ä–∏ TP –ø—Ä–µ—Å–µ—Ç:\n")
for i, preset in enumerate(tp_presets):
    print(f"{i + 1}. {preset['name']}")

preset_choice = int(input("\n–¢–≤–æ–π –≤—ã–±–æ—Ä: ")) - 1
preset = tp_presets[preset_choice]
tp_relative = preset["take_percents"]
platform_levels = preset.get("platform_levels", [])  # –µ—Å–ª–∏ –µ—Å—Ç—å

def convert_relative_to_absolute(relatives):
    """Convert relative TP percentages (by remainder) to absolute weights."""
    absolutes = []
    remaining = 1.0
    for r in relatives:
        part = round(remaining * r, 6)
        absolutes.append(part)
        remaining -= part
    return absolutes

tp_percents = convert_relative_to_absolute(tp_relative) if sum(tp_relative) > 1.01 else tp_relative

# ===== –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –≤–≤–æ–¥ TP =====
try:
    price = client.get_price(symbol)
    print(f"\nüìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: {price:.2f}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
    exit(1)

tp_prices = []
print("\n–í–≤–µ–¥–∏ —Ü–µ–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞:")
for i, percent in enumerate(tp_percents):
    try:
        tp_price = float(input(f"  TP {i + 1} (–¥–æ–ª—è {percent * 100:.1f}%): "))
        tp_prices.append(tp_price)
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã.")
        exit(1)

# ===== Stop Loss =====
try:
    sl_price = float(input("SL price: "))
except ValueError:
    print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ SL.")
    exit(1)

# ===== –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ =====
print(f"\nüõí –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä:")
print(f" - TP –ø—Ä–æ—Ü–µ–Ω—Ç—ã: {tp_percents}")
print(f" - TP —Ü–µ–Ω—ã:     {tp_prices}")
print(f" - SL —Ü–µ–Ω–∞:     {sl_price}\n")

try:
    result = client.place_order(
        symbol=symbol,
        side=side,
        leverage=leverage,
        margin_usd=margin_usd,
        tp_prices=tp_prices,
        tp_percents=tp_percents,
        sl_price=sl_price
    )

    print(f"\n‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â—ë–Ω! TP –æ—Ä–¥–µ—Ä–æ–≤: {result['tp_orders']}")

except Exception as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")

